// Mocks generated by Mockito 5.2.0 from annotations
// in clean_architecture_flutter/test/screens/login/presentation/blocs/user_login/user_login_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:clean_architecture_flutter/core/error/failures.dart' as _i6;
import 'package:clean_architecture_flutter/core/usecases/fetch_token.dart'
    as _i8;
import 'package:clean_architecture_flutter/screens/login/domain/entities/login.dart'
    as _i7;
import 'package:clean_architecture_flutter/screens/login/domain/repositories/login_repository.dart'
    as _i2;
import 'package:clean_architecture_flutter/screens/login/domain/usecases/login_user.dart'
    as _i4;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeLoginRepository_0 extends _i1.Fake implements _i2.LoginRepository {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [LoginUser].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUser extends _i1.Mock implements _i4.LoginUser {
  MockLoginUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LoginRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeLoginRepository_0()) as _i2.LoginRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Login>> call(
          _i4.LoginParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i3.Either<_i6.Failure, _i7.Login>>.value(
                  _FakeEither_1<_i6.Failure, _i7.Login>()))
          as _i5.Future<_i3.Either<_i6.Failure, _i7.Login>>);
}

/// A class which mocks [FetchToken].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchToken extends _i1.Mock implements _i8.FetchToken {
  MockFetchToken() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LoginRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeLoginRepository_0()) as _i2.LoginRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Login>> call(
          _i8.TokenParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i3.Either<_i6.Failure, _i7.Login>>.value(
                  _FakeEither_1<_i6.Failure, _i7.Login>()))
          as _i5.Future<_i3.Either<_i6.Failure, _i7.Login>>);
}
